# -*- coding: utf-8 -*-
"""CSDP_601_Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sNvbxP0t1-BD5qHe-XnqhpTFMQdLjG8J
"""

import math
import random
from sympy import primerange

def keys_generator():
    # step 1. pick 2 prime numbers p, q <= 10^100
    # I use smaller p, q value for shorter runtime in this project
    prime_numbers = list(primerange(100, 200))
    p = random.choice(prime_numbers)
    prime_numbers.remove(p)
    q = random.choice(prime_numbers)
    print("step 1: value of p is", p, ", value of q is", q)

    # step 2. n=pq
    n = p * q
    print("step 2: value of n is", n)

    # step 3. z=(p-1)(q-1)
    z = (p - 1) * (q - 1)
    print("step 3: value of z is", z)

    # step 4. pick a prime number e in the range (1,z), such that gcd(e,z)=1
    prime_num_e = list(primerange(1, z))
    e = random.choice(prime_num_e)
    print("step 4: value of e is", e)

    # step 5. find a prime number d such that (d*e) mod z =1
    def calculate_gcd(a, b):
        if a == 0:
            return b, 0, 1
        gcd, x1, y1 = calculate_gcd(b % a, a)
        x = y1 - (b // a) * x1
        y = x1
        print(gcd, x, y)
        return gcd, x, y

    def compute_d(e, z):
        gcd, x, y = calculate_gcd(e, z)
        return x % z

    d = compute_d(e, z)
    print("step 5: value of d is", d)

    # public key(e,n)
    # private key(d,n)
    return (e, n), (d, n)

# step 6
# encrypt: encrypted_message = (c^e mod n), c is the message to be sent
# decrypt: c = ((encrypted_message)^d) mod n
def encrypt_message(msg, public_key):
    e, n = public_key
    # encrypt each character by its ASCII value
    encrypted_message = [(ord(char) ** e) % n for char in msg]
    return encrypted_message

def decrypt_message(encrypted_msg, private_key):
    d, n = private_key
    # convert each ASCII value back to the original character
    decrypted_message = ''.join([chr((char ** d) % n) for char in encrypted_msg])
    return decrypted_message

print("-------------Encrypt for Alice--------------")
public_key_Alice, private_key_Alice = keys_generator()
print("step 6:")
print("public key (e, n) is:", public_key_Alice)
print("private key (d, n) is:", private_key_Alice)
message_Alice = input("please enter a message: ")
receiver_Alice = input("please choose a receiver: ")
print("original message is:", message_Alice)
encrypted_message_Alice = encrypt_message(message_Alice, public_key_Alice)
print("encrypted message is:", encrypted_message_Alice)
decrypted_message_Alice = decrypt_message(encrypted_message_Alice, private_key_Alice)
print("decrypted message is:", decrypted_message_Alice)
print()

print("-------------Encrypt for Mike--------------")
public_key_Mike, private_key_Mike = keys_generator()
print("step 6:")
print("public key (e, n) is:", public_key_Mike)
print("private key (d, n) is:", private_key_Mike)
message_Mike = input("please enter a message: ")
receiver_Mike = input("please choose a receiver: ")
print("original message is:", message_Mike)
encrypted_message_Mike = encrypt_message(message_Mike, public_key_Mike)
print("encrypted message is:", encrypted_message_Mike)
decrypted_message_Mike = decrypt_message(encrypted_message_Mike, private_key_Mike)
print("decrypted message is:", decrypted_message_Mike)
print()

print("-------------Encrypt for Greg--------------")
public_key_Greg, private_key_Greg = keys_generator()
print("step 6:")
print("public key (e, n) is:", public_key_Greg)
print("private key (d, n) is:", private_key_Greg)
message_Greg = input("please enter a message: ")
receiver_Greg = input("please choose a receiver: ")
print("original message is:", message_Greg)
encrypted_message_Greg = encrypt_message(message_Greg, public_key_Greg)
print("encrypted message is:", encrypted_message_Greg)
decrypted_message_Greg = decrypt_message(encrypted_message_Greg, private_key_Greg)
print("decrypted message is:", decrypted_message_Greg)
print()